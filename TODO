Swift Mailer SE:
----------------

 * Write some sanity tests
 * $message->addHeader(MimeFactory::create('header')->setValue('bar'))
 * $message->removeHeader('X-Foo')
 * $event = $this->_eventDispatcher->createEvent('send');
   $event->setMessage($message);
   $this->_eventDispatcher->dispatchEvent($event);
 * CharacterReaderFactory (map charsets to CharacterReaders).
   - Big5
   - Shift-JIS
   - ISO-10646
   - CP950
 * Optimize QpEncoder/Rfc2231Encoder/CharacterStream/CharacterReader
   - Read more than 1 char at a time?
   - Get characters already unpacked as a byte array?
   - Avoid using pack()/unpack() completely?
 * Streams
   - FileCharacterStream
 * Logging
 * Transports
   - PopBeforeSmtp authentication
   - Esmtp extension support
     - 8BITMIME
   - NativeMail
   - Rotating
   - Multi
 * EventFactory and EventDispatcher
   - SendEvent
     - getMessage()
     - getTransport()
     - getState() [pending,complete,failed,cancelled]
   - ConnectionChangeEvent
     - getConnection()
     - getState() [open,closed,failed,cancelled]
   - ResponseEvent
   - CommandEvent
 * Plugins
   - AntiFlood
   - Throttler
   - Verbose
   - Decorator
   - BandwidthMonitor
   - FileEmbedder
 * V3 Wrapper classes

Swift Mailer EE:
----------------

 * DKIM/Domain Keys
 * PKCS signed messages
 * XML representations of messages
   - toXml() in mime entities
   - createFromXml() in a MessageFactory
 * MessageFactory
   - createFromString()
   - createFromXml()
 * Direct MX Transport
   - By-pass using a single SMTP server as a relay and connect to needed MX
   - Group recipients by domain for efficiency
   - *Much* more reliable failure tracking
 * Advanced Content-Type support (already "supported" in SE if built manually,
   but will add wrapper code)
   - multipart/digest, message/external, message/partial
 * Message forwarding
 * REST architecture, coupled with the XML representation of emails to delegate
   sending large batches around a cluster of HTTP hosts
 * Provide an Incoming MTA (not complex, it's just a Transport + the MessageFactory)
   - Potentially handle bounce-backs?
   - Any "voodoo" way to POST mail to a web page on port 80?
     - Using a simple script registered with inetd or xinetd would do the trick
 * Drop-in ESMTP extensions
   - STARTTLS (http://au.php.net/manual/en/function.stream-socket-enable-crypto.php)
   - PIPELINING
   - Additional NTLM authentication
   - Digest-MD5 authentication
   - GSSAPI authentication
   - ETRN
   - DSN
   - VERP
 * Caches
   - PersistentCache (for delayed/paused batch sending)?

Website Re-Design:
------------------

 * New Logo
 * New layout without sidebar
   - See getvanilla.com for inspiration
   - Thinking perhaps a red/white/grey color scheme
   - Adsense ads at the end of some pages
   - Documentation integrated
     - User comments filtered
     - V4/V3 separation (/docs/v3/something vs. /docs/v4/something)
     - Duplicate content from DokuWiki and add redirects
     - Show EE specific documentation to logged in users
   - Scrap the www. domain and do a redirect
   - Bug tracking
     - Integrated
     - Priority fixes for EE users
   - Take PayPal express checkout payments & paypal credit card payments
   - Issue licenses with usernames/passwords to download area
     - Allow purchase of additional licenses
     - Allow notification of new releases
   - Book (PDF) download

Licensing:
----------

 * Need to produce a license which allows the use of EE for 1 domain name only
   - Includes subdomains
   - Allow the domain name to be transferred at no cost
   - Valid for the lifetime of v4

Swift Mailer Book:
------------------

 * 30-40 pages with examples
   - Include developer guide

Test Suite:
-----------

 * Change test results bar to show actual number of tests running
 * Add a thin bar showing the percentage progress below the results bar
 * Smoke Test abilities.  Pretty much just needs to be able to display images.
   - Define a markup? {image @ http://swiftmailer.org/testing/4.0.1/smokes/basic.png}
 
EoM
